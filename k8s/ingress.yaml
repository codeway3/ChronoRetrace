# ============================================================================
# ChronoRetrace Ingress Configuration
# External traffic routing and SSL termination
# ============================================================================

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: chronoretrace-ingress
  namespace: chronoretrace
  labels:
    app: chronoretrace
    component: ingress
  annotations:
    # Ingress Controller
    kubernetes.io/ingress.class: "nginx"

    # SSL Configuration
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"

    # Rate Limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "10"

    # Security Headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # CORS Configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://chronoretrace.com,https://www.chronoretrace.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"

    # Performance
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "5"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"

    # Load Balancing
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    nginx.ingress.kubernetes.io/session-cookie-name: "chronoretrace-session"
    nginx.ingress.kubernetes.io/session-cookie-expires: "86400"
    nginx.ingress.kubernetes.io/session-cookie-max-age: "86400"
    nginx.ingress.kubernetes.io/session-cookie-path: "/"

    # Monitoring
    nginx.ingress.kubernetes.io/enable-access-log: "true"
    nginx.ingress.kubernetes.io/enable-rewrite-log: "false"
spec:
  tls:
    - hosts:
        - chronoretrace.com
        - www.chronoretrace.com
      secretName: chronoretrace-tls # pragma: allowlist secret
  rules:
    - host: chronoretrace.com
      http:
        paths:
          # API Routes
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: nginx
                port:
                  number: 80

          # WebSocket Routes
          - path: /ws
            pathType: Prefix
            backend:
              service:
                name: nginx
                port:
                  number: 80

          # Health Check
          - path: /health
            pathType: Exact
            backend:
              service:
                name: nginx
                port:
                  number: 80

          # Frontend Routes (catch-all)
          - path: /
            pathType: Prefix
            backend:
              service:
                name: nginx
                port:
                  number: 80

    - host: www.chronoretrace.com
      http:
        paths:
          # API Routes
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: nginx
                port:
                  number: 80

          # WebSocket Routes
          - path: /ws
            pathType: Prefix
            backend:
              service:
                name: nginx
                port:
                  number: 80

          # Health Check
          - path: /health
            pathType: Exact
            backend:
              service:
                name: nginx
                port:
                  number: 80

          # Frontend Routes (catch-all)
          - path: /
            pathType: Prefix
            backend:
              service:
                name: nginx
                port:
                  number: 80

---
# API-specific Ingress with stricter rate limiting
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: chronoretrace-api-ingress
  namespace: chronoretrace
  labels:
    app: chronoretrace
    component: api-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"

    # Stricter rate limiting for API
    nginx.ingress.kubernetes.io/rate-limit: "50"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "5"

    # API-specific configuration
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/use-regex: "true"

    # Request buffering
    nginx.ingress.kubernetes.io/proxy-buffering: "on"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "4k"

    # Timeout configuration
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "5"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
spec:
  tls:
    - hosts:
        - api.chronoretrace.com
      secretName: chronoretrace-api-tls # pragma: allowlist secret
  rules:
    - host: api.chronoretrace.com
      http:
        paths:
          - path: /v1(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: backend
                port:
                  number: 8000

---
# Authentication Ingress with very strict rate limiting
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: chronoretrace-auth-ingress
  namespace: chronoretrace
  labels:
    app: chronoretrace
    component: auth-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"

    # Very strict rate limiting for auth endpoints
    nginx.ingress.kubernetes.io/rate-limit: "10"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "2"

    # Additional security for auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options "DENY" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "no-referrer" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
      add_header Content-Security-Policy "default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'self'; frame-ancestors 'none';" always;
spec:
  tls:
    - hosts:
        - chronoretrace.com
        - www.chronoretrace.com
      secretName: chronoretrace-tls # pragma: allowlist secret
  rules:
    - host: chronoretrace.com
      http:
        paths:
          - path: /api/auth
            pathType: Prefix
            backend:
              service:
                name: backend
                port:
                  number: 8000
          - path: /api/login
            pathType: Prefix
            backend:
              service:
                name: backend
                port:
                  number: 8000
          - path: /api/register
            pathType: Prefix
            backend:
              service:
                name: backend
                port:
                  number: 8000

    - host: www.chronoretrace.com
      http:
        paths:
          - path: /api/auth
            pathType: Prefix
            backend:
              service:
                name: backend
                port:
                  number: 8000
          - path: /api/login
            pathType: Prefix
            backend:
              service:
                name: backend
                port:
                  number: 8000
          - path: /api/register
            pathType: Prefix
            backend:
              service:
                name: backend
                port:
                  number: 8000

---
# Certificate Issuer for Let's Encrypt
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  labels:
    app: chronoretrace
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: admin@chronoretrace.com  # Replace with your email
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
      - http01:
          ingress:
            class: nginx
            podTemplate:
              spec:
                nodeSelector:
                  "kubernetes.io/os": linux

---
# Staging Certificate Issuer for Testing
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
  labels:
    app: chronoretrace
spec:
  acme:
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    email: admin@chronoretrace.com  # Replace with your email
    privateKeySecretRef:
      name: letsencrypt-staging
    solvers:
      - http01:
          ingress:
            class: nginx
            podTemplate:
              spec:
                nodeSelector:
                  "kubernetes.io/os": linux
