# ============================================================================
# ChronoRetrace Frontend Deployment
# React frontend served by Nginx with auto-scaling
# ============================================================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: chronoretrace
  labels:
    app: chronoretrace
    component: frontend
    version: v1
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: chronoretrace
      component: frontend
  template:
    metadata:
      labels:
        app: chronoretrace
        component: frontend
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "80"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 101
        fsGroup: 101
      serviceAccountName: chronoretrace-frontend
      containers:
        - name: frontend
          image: chronoretrace/frontend:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
          env:
            - name: NODE_ENV
              value: "production"
            - name: REACT_APP_API_URL
              valueFrom:
                configMapKeyRef:
                  name: chronoretrace-config
                  key: REACT_APP_API_URL
            - name: REACT_APP_WS_URL
              valueFrom:
                configMapKeyRef:
                  name: chronoretrace-config
                  key: REACT_APP_WS_URL
            - name: REACT_APP_ENVIRONMENT
              value: "production"
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: nginx-cache
              mountPath: /var/cache/nginx
            - name: nginx-run
              mountPath: /var/run
            - name: tmp
              mountPath: /tmp
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /health
              port: 80
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: 80
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health
              port: 80
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 30
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
              add:
                - CHOWN
                - SETGID
                - SETUID
      volumes:
        - name: nginx-config
          configMap:
            name: chronoretrace-nginx-config
        - name: nginx-cache
          emptyDir: {}
        - name: nginx-run
          emptyDir: {}
        - name: tmp
          emptyDir: {}
      imagePullSecrets:
        - name: chronoretrace-registry
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: component
                      operator: In
                      values:
                        - frontend
                topologyKey: kubernetes.io/hostname
      tolerations:
        - key: "node.kubernetes.io/not-ready"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 300
        - key: "node.kubernetes.io/unreachable"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 300

---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: chronoretrace
  labels:
    app: chronoretrace
    component: frontend
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app: chronoretrace
    component: frontend

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: chronoretrace-frontend
  namespace: chronoretrace
  labels:
    app: chronoretrace
    component: frontend
automountServiceAccountToken: false

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: frontend-hpa
  namespace: chronoretrace
  labels:
    app: chronoretrace
    component: frontend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: frontend
  minReplicas: 2
  maxReplicas: 6
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
        - type: Pods
          value: 1
          periodSeconds: 60
      selectPolicy: Max

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: frontend-pdb
  namespace: chronoretrace
  labels:
    app: chronoretrace
    component: frontend
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: chronoretrace
      component: frontend

---
# Network Policy for Frontend Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: frontend-network-policy
  namespace: chronoretrace
  labels:
    app: chronoretrace
    component: frontend
spec:
  podSelector:
    matchLabels:
      app: chronoretrace
      component: frontend
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # Allow traffic from nginx load balancer
    - from:
        - podSelector:
            matchLabels:
              app: chronoretrace
              component: nginx
      ports:
        - protocol: TCP
          port: 80
    # Allow traffic from ingress controller
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 80
    # Allow traffic from monitoring
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 80
  egress:
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53
    # Allow access to backend API
    - to:
        - podSelector:
            matchLabels:
              app: chronoretrace
              component: backend
      ports:
        - protocol: TCP
          port: 8000
    # Allow HTTPS traffic for CDN and external resources
    - to: []
      ports:
        - protocol: TCP
          port: 443
