# ChronoRetrace Nginx 负载均衡配置
# 用于生产环境的高性能负载均衡和反向代理

# 全局配置
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# 事件配置
events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
    worker_rlimit_nofile 65535;
}

# HTTP配置
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    
    # 基础性能优化
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    server_tokens off;
    
    # 缓冲区设置
    client_body_buffer_size 128k;
    client_max_body_size 50m;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;
    
    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # 限流配置
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=general:10m rate=200r/m;
    
    # 连接限制
    limit_conn_zone $binary_remote_addr zone=perip:10m;
    limit_conn_zone $server_name zone=perserver:10m;
    
    # 上游服务器配置
    upstream chronoretrace_backend {
        least_conn;
        
        # 后端服务器池
        server backend-1:8000 weight=3 max_fails=3 fail_timeout=30s;
        server backend-2:8000 weight=3 max_fails=3 fail_timeout=30s;
        server backend-3:8000 weight=2 max_fails=3 fail_timeout=30s;
        
        # 备用服务器
        server backup-backend:8000 backup;
        
        # 健康检查
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }
    
    upstream chronoretrace_frontend {
        least_conn;
        
        # 前端服务器池
        server frontend-1:3000 weight=1 max_fails=2 fail_timeout=30s;
        server frontend-2:3000 weight=1 max_fails=2 fail_timeout=30s;
        
        keepalive 16;
    }
    
    # 缓存配置
    proxy_cache_path /var/cache/nginx/api levels=1:2 keys_zone=api_cache:100m max_size=1g inactive=60m use_temp_path=off;
    proxy_cache_path /var/cache/nginx/static levels=1:2 keys_zone=static_cache:50m max_size=500m inactive=24h use_temp_path=off;
    
    # 主服务器配置
    server {
        listen 80;
        listen [::]:80;
        server_name chronoretrace.com www.chronoretrace.com;
        
        # HTTP重定向到HTTPS
        return 301 https://$server_name$request_uri;
    }
    
    # HTTPS服务器配置
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name chronoretrace.com www.chronoretrace.com;
        
        # SSL配置
        ssl_certificate /etc/ssl/certs/chronoretrace.crt;
        ssl_certificate_key /etc/ssl/private/chronoretrace.key;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;
        
        # 现代SSL配置
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        
        # HSTS
        add_header Strict-Transport-Security "max-age=63072000" always;
        
        # 安全头
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";
        
        # 连接限制
        limit_conn perip 20;
        limit_conn perserver 1000;
        
        # API路由
        location /api/ {
            # 限流
            limit_req zone=api burst=20 nodelay;
            
            # 代理设置
            proxy_pass http://chronoretrace_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # 超时设置
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # 缓存配置（选择性缓存）
            proxy_cache api_cache;
            proxy_cache_valid 200 302 5m;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_lock on;
            
            # 缓存键
            proxy_cache_key "$scheme$request_method$host$request_uri";
            
            # 跳过缓存的条件
            proxy_cache_bypass $http_pragma $http_authorization;
            proxy_no_cache $http_pragma $http_authorization;
        }
        
        # 认证API特殊处理
        location /api/auth/ {
            limit_req zone=login burst=5 nodelay;
            
            proxy_pass http://chronoretrace_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 不缓存认证请求
            proxy_no_cache 1;
            proxy_cache_bypass 1;
        }
        
        # WebSocket支持
        location /ws/ {
            proxy_pass http://chronoretrace_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket特定超时
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
        }
        
        # 静态文件
        location /static/ {
            alias /var/www/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
            
            # 静态文件缓存
            proxy_cache static_cache;
            proxy_cache_valid 200 24h;
        }
        
        # 前端应用
        location / {
            limit_req zone=general burst=50 nodelay;
            
            proxy_pass http://chronoretrace_frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # 前端超时设置
            proxy_connect_timeout 3s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # 健康检查端点
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Nginx状态页面（仅内部访问）
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }
        
        # 错误页面
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
    
    # 监控和管理服务器（内部访问）
    server {
        listen 8080;
        server_name localhost;
        
        # 仅允许内部访问
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        # Prometheus指标
        location /metrics {
            proxy_pass http://chronoretrace_backend/metrics;
            proxy_set_header Host $host;
        }
        
        # 缓存清理
        location /cache/purge {
            proxy_cache_purge api_cache "$scheme$request_method$host$arg_uri";
        }
    }
}

# Stream配置（TCP/UDP负载均衡）
stream {
    # 数据库连接负载均衡
    upstream postgres_cluster {
        least_conn;
        server postgres-master:5432 weight=3;
        server postgres-replica-1:5432 weight=1;
        server postgres-replica-2:5432 weight=1;
    }
    
    # Redis集群负载均衡
    upstream redis_cluster {
        hash $remote_addr consistent;
        server redis-1:6379;
        server redis-2:6379;
        server redis-3:6379;
    }
    
    # PostgreSQL代理
    server {
        listen 5432;
        proxy_pass postgres_cluster;
        proxy_timeout 1s;
        proxy_responses 1;
        proxy_connect_timeout 1s;
    }
    
    # Redis代理
    server {
        listen 6379;
        proxy_pass redis_cluster;
        proxy_timeout 1s;
        proxy_responses 1;
        proxy_connect_timeout 1s;
    }
}