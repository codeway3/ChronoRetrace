[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "chrono-retrace-backend"
version = "0.1.0"
description = "ChronoRetrace Backend - Financial Data Analysis Platform"
requires-python = ">=3.10"
dependencies = [
    "fastapi",
    "uvicorn",
    "sqlalchemy",
    "pandas",
    "pydantic",
    "python-dotenv",
]

[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = [
    "S101",   # asserts allowed in tests
    "ARG",    # unused function args -> fixtures nevertheless are functionally relevant
    "FBT",    # don't care about booleans as positional arguments in tests
    "PLR2004", # Magic value used in comparison, consider replacing with a constant variable
    "S311",   # Standard pseudo-random generators are not suitable for cryptographic purposes
]

[tool.ruff.lint.isort]
known-first-party = ["app"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
pythonpath = ["."]
addopts = [
    "-v",
    "--strict-markers",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html"
]
asyncio_mode = "auto"
markers = [
    "anyio",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as asyncio tests",
]
filterwarnings = [
    "ignore::DeprecationWarning:passlib.*",
    "ignore::DeprecationWarning:unittest.*",
    "ignore:'crypt' is deprecated:DeprecationWarning",
    "ignore:It is deprecated to return a value that is not None from a test case:DeprecationWarning",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
