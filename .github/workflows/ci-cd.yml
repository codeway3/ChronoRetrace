name: ChronoRetrace CI/CD Pipeline

# 触发条件
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# 环境变量
env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

# 作业定义
jobs:
  # 代码质量检查和基本测试
  test:
    name: Code Quality & Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Python code formatting
      run: |
        cd backend
        black --check .

    - name: Python unit tests
      run: |
        cd backend
        PYTHONPATH=. pytest tests/unit/ -v -m "not integration"

    - name: Frontend linting
      run: |
        cd frontend
        npm run lint

    - name: Frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false --passWithNoTests

  # 集成测试（可选，需要手动触发或特定条件）
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[integration]')

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Start test server
      run: |
        cd backend
        python start_dev.py &
        sleep 10  # 等待服务器启动
      env:
        ENVIRONMENT: test
        REDIS_URL: redis://localhost:6379

    - name: Run integration tests
      run: |
        cd backend
        PYTHONPATH=. pytest tests/integration/ -v -m "integration"

    - name: Stop test server
      run: |
        pkill -f "python start_dev.py" || true

  # 构建验证
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Build frontend
      run: |
        cd frontend
        npm run build
