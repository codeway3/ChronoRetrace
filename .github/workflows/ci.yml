# .github/workflows/ci.yml

name: Backend and Frontend CI

# Controls when the workflow will run
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  #---------------------------------
  # Backend Job
  #---------------------------------
  backend-ci:
    name: Backend CI
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip' # Enable pip cache for faster installs
          cache-dependency-path: ./backend/requirements.txt # Specify cache path for backend directory

      # 3. Clear pip cache
      - name: Clear pip cache
        run: pip cache purge
        working-directory: ./backend

      # 4. Install dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff pytest # Explicitly install testing/linting tools
        working-directory: ./backend

      # 5. Lint with Ruff
      - name: Lint with Ruff
        run: ruff check backend/

      # 6. Run pytest
      - name: Run pytest
        run: pytest backend/
        working-directory: .

      # 7. Debug: List installed packages
      - name: List Python dependencies
        run: pip list
        working-directory: ./backend

  #---------------------------------
  # Frontend Job
  #---------------------------------
  frontend-ci:
    name: Frontend CI
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use a recent LTS version
          cache: 'npm' # Enable npm cache for faster installs
          cache-dependency-path: ./frontend/package-lock.json # Specify cache path for frontend directory

      # 3. Update npm
      - name: Update npm
        run: npm install -g npm@11.5.2
        working-directory: ./frontend

      # 4. Clear npm cache
      - name: Clear npm cache
        run: npm cache clean --force
        working-directory: ./frontend

      # 5. Install dependencies
      - name: Install npm dependencies
        run: npm install react-router-dom@6.26.1 axios@1.7.7
        working-directory: ./frontend

      # 6. Lint with ESLint
      - name: Lint with ESLint
        run: npm run lint
        working-directory: ./frontend

      # 7. Debug: List installed packages
      - name: List npm dependencies
        run: npm list
        working-directory: ./frontend
