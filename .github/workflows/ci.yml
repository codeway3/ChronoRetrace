# .github/workflows/ci.yml

name: Backend and Frontend CI

# Controls when the workflow will run
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  #---------------------------------
  # Backend Job
  #---------------------------------
  backend-ci:
    name: Backend CI
    runs-on: ubuntu-latest

    # Add Redis service for integration tests
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # 1. Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 3. Install dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          cd backend
          pip install -r requirements-dev.txt
          pip list

      # 4. Code Quality Checks
      - name: Lint with Ruff
        run: |
          cd backend
          python -m ruff check .
      
      - name: Security scan with Bandit
        run: |
          cd backend
          python -m bandit -r app/ -f json -o bandit-report.json || true
      
      - name: Check dependencies with Safety
        run: |
          cd backend
          python -m safety check --json --output safety-report.json || true

      # 5. Install Redis CLI tools
      - name: Install Redis CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-tools

      # 6. Wait for Redis to be ready
      - name: Wait for Redis
        run: |
          timeout 30 bash -c 'until redis-cli ping; do sleep 1; done'

      # 7. Run pytest with coverage
      - name: Run pytest with coverage
        run: |
          cd backend
          python -m pytest --cov=app --cov-report=xml --cov-report=term-missing -v
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          DATABASE_URL: sqlite:///./test.db
          SECRET_KEY: test-secret-key-for-ci
          ENVIRONMENT: test
      
      # 8. Upload coverage reports
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
      
      # 9. Upload security reports
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            backend/bandit-report.json
            backend/safety-report.json

  #---------------------------------
  # Frontend Job
  #---------------------------------
  frontend-ci:
    name: Frontend CI
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use a recent LTS version
          cache: 'npm' # Enable npm cache for faster installs
          cache-dependency-path: ./frontend/package-lock.json # Specify cache path for frontend directory

      # 3. Update npm
      - name: Update npm
        run: npm install -g npm@11.5.2
        working-directory: ./frontend

      # 4. Clear npm cache
      - name: Clear npm cache
        run: npm cache clean --force
        working-directory: ./frontend

      # 5. Install dependencies
      - name: Install npm dependencies
        run: npm install react-router-dom@6.26.1 axios@1.7.7
        working-directory: ./frontend

      # 6. Lint with ESLint
      - name: Lint with ESLint
        run: npm run lint
        working-directory: ./frontend

      # 7. Debug: List installed packages
      - name: List npm dependencies
        run: npm list
        working-directory: ./frontend
